{"version":3,"sources":["Notes.js","PasswordOverlay.js","Editor.js","Search.js","App.js","index.js"],"names":["Note","props","note","setIsEditorActive","setEditingNote","deleteNote","onClick","obj","id","fmtext","isEncrypted","className","e","stopPropagation","ReactHtmlParser","Notes","notes","noteArray","map","length","a","split","b","i","j","Math","random","toFixed","join","generate_token","PasswordOverlay","useState","pass","setPass","Encrypting","setIsoverlayActive","encryptionState","autoFocus","type","onChange","target","value","Editor","ref","useRef","isSaveEnabled","setIsSaveEnabled","isoverlayActive","isEditorActive","editingNote","setNotes","setEncryptionState","useEffect","Object","keys","save","str","state","encState","patt","updatedNotes","pos","findIndex","ele","rawtext","push","console","log","encryptedText","texto","CryptoJS","AES","encrypt","toString","decryptedText","decrypt","enc","Utf8","alert","title","class","html","innerRef","Search","setIsSearching","setSearchedNotes","searchValue","setSearchValue","includes","sNotes","filter","toLowerCase","searchednotes","words","len","word","substr","placeholder","App","searchedNotes","isSearching","idgenerate","setIdgenerate","splice","notestring","localStorage","getItem","noteobj","JSON","parse","currId","Number","setItem","arrString","stringify","fmText","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7443f3a5.chunk.js","sourcesContent":["import \"./Notes.scss\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\n\r\nfunction generate_token(length) {\r\n  //edit the token allowed characters\r\n  const a =\r\n    \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\".split(\"\");\r\n  const b = [];\r\n  for (let i = 0; i < length; i++) {\r\n    let j = (Math.random() * (a.length - 1)).toFixed(0);\r\n    b[i] = a[j];\r\n  }\r\n  return b.join(\"\");\r\n}\r\n\r\nconst Note = (props) => {\r\n  const { note, setIsEditorActive, setEditingNote, deleteNote } = props;\r\n\r\n  const openCurrentNote = () => {\r\n    setIsEditorActive(true);\r\n    const obj = {\r\n      id: note.id,\r\n      fmtext: note.fmtext,\r\n      isEncrypted: note.isEncrypted,\r\n    };\r\n    setEditingNote(obj);\r\n  };\r\n\r\n  return (\r\n    <div onClick={openCurrentNote} className=\"Note\">\r\n      <button\r\n        className=\"deleteCross\"\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n          deleteNote(note.id);\r\n        }}\r\n      >\r\n        {\"\\u00D7\"}\r\n      </button>\r\n      {ReactHtmlParser(note.fmtext)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Notes = (props) => {\r\n  const { notes, setIsEditorActive, setEditingNote, deleteNote } = props;\r\n\r\n  const noteArray = notes.map((note) => {\r\n    return (\r\n      <Note\r\n        setIsEditorActive={setIsEditorActive}\r\n        key={generate_token(5)}\r\n        note={note}\r\n        setEditingNote={setEditingNote}\r\n        deleteNote={deleteNote}\r\n      />\r\n    );\r\n  });\r\n\r\n  const emptyNoteMessage = () => {\r\n    return <div className=\"emptyMessage\">No notes here</div>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"Notes\">\r\n      {noteArray && noteArray.length > 0 ? noteArray : emptyNoteMessage()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notes;\r\n","import { useState } from \"react\";\r\nimport \"./PasswordOverlay.scss\";\r\n\r\nconst PasswordOverlay = (props) => {\r\n  const [pass, setPass] = useState(\"\");\r\n  const { Encrypting, setIsoverlayActive, encryptionState } = props;\r\n\r\n  const handleChange = (e) => {\r\n    setPass(e.target.value);\r\n  };\r\n\r\n  const passwordSelect = () => {\r\n    if (pass.length === 0) {\r\n      return;\r\n    }\r\n    Encrypting(pass);\r\n  };\r\n\r\n  return (\r\n    <div className=\"PasswordOverlay\">\r\n      <div className=\"passwordBox\">\r\n        <div className=\"passwordSection\">\r\n          <label>Password: </label>\r\n          <input autoFocus={true} type=\"text\" onChange={handleChange} />\r\n        </div>\r\n        {encryptionState === \"encrypt\" ? (\r\n          <div className=\"passwordNote\">\r\n            <span>Note: </span> Make sure to remember the password. Only this\r\n            password will be able to decrypt the current note.\r\n          </div>\r\n        ) : (\r\n          <div className=\"passwordNote\">\r\n            Type the password which you have used to encrypt this before to\r\n            decrypt it.\r\n          </div>\r\n        )}\r\n        <div className=\"passwordButtons\">\r\n          <button onClick={passwordSelect} className=\"select\">\r\n            {\"OK \\u2713\"}\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              setIsoverlayActive(false);\r\n            }}\r\n            className=\"close\"\r\n          >\r\n            {\"Cancel \\u00D7\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PasswordOverlay;\r\n","import { useState, useRef, useEffect } from \"react\";\r\nimport \"./Editor.scss\";\r\nimport ContentEditable from \"react-contenteditable\";\r\n\r\nimport CryptoJS from \"crypto-js\";\r\n\r\nimport PasswordOverlay from \"./PasswordOverlay\";\r\n\r\nconst Editor = (props) => {\r\n  const ref = useRef();\r\n  const [isSaveEnabled, setIsSaveEnabled] = useState(false);\r\n  const [isoverlayActive, setIsoverlayActive] = useState(false);\r\n\r\n  const {\r\n    setIsEditorActive,\r\n    isEditorActive,\r\n    editingNote,\r\n    setEditingNote,\r\n    setNotes,\r\n    notes,\r\n    deleteNote,\r\n  } = props;\r\n\r\n  const [encryptionState, setEncryptionState] = useState(\"encrypt\");\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(editingNote).length > 0) {\r\n      setEncryptionState(editingNote.isEncrypted ? \"decrypt\" : \"encrypt\");\r\n    }\r\n  }, [editingNote.isEncrypted]);\r\n\r\n  const encrypt = (texto, pass) => {\r\n    const encrypted = CryptoJS.AES.encrypt(texto, pass);\r\n    return encrypted;\r\n  };\r\n\r\n  const decrypt = (texto, pass) => {\r\n    const decrypted = CryptoJS.AES.decrypt(texto, pass);\r\n    return decrypted.toString(CryptoJS.enc.Utf8);\r\n  };\r\n\r\n  const save = (state = \"null\", value = \"\", encState = \"\") => {\r\n    // debugger;\r\n    const patt = /<\\/*[a-z]+>/g;\r\n    let str;\r\n    let obj;\r\n    const updatedNotes = [...notes];\r\n\r\n    let pos = updatedNotes.findIndex((ele) => ele.id === editingNote.id);\r\n    if (state === \"encrypt\") {\r\n      str = \"\";\r\n      obj = {\r\n        id: editingNote.id,\r\n        fmtext: value,\r\n        rawtext: str,\r\n        isEncrypted: encState === \"decrypt\",\r\n      };\r\n    } else {\r\n      str = editingNote.fmtext.split(patt).join(\" \");\r\n      obj = {\r\n        id: editingNote.id,\r\n        fmtext: editingNote.fmtext,\r\n        rawtext: str,\r\n        isEncrypted: encState === \"decrypt\",\r\n      };\r\n    }\r\n\r\n    if (pos === -1) {\r\n      updatedNotes.push(obj);\r\n    } else {\r\n      updatedNotes[pos] = obj;\r\n    }\r\n\r\n    setNotes(updatedNotes);\r\n  };\r\n\r\n  const Encrypt = () => {\r\n    if (editingNote.fmtext.length === 0) {\r\n      alert(\"Type something first\");\r\n    }\r\n    setIsoverlayActive(true);\r\n  };\r\n\r\n  const Encrypting = (pass) => {\r\n    const str = editingNote.fmtext;\r\n    console.log(\"editingnote: \", str);\r\n    let value;\r\n    let encState;\r\n    if (encryptionState === \"encrypt\") {\r\n      encState = \"decrypt\";\r\n      const encryptedText = encrypt(str, pass).toString();\r\n\r\n      value = encryptedText;\r\n      setEditingNote({ ...editingNote, fmtext: encryptedText });\r\n    } else {\r\n      const decryptedText = decrypt(str, pass);\r\n      if (decryptedText.length === 0) {\r\n        alert(\"Wrong Password.Try again\");\r\n\r\n        return;\r\n      }\r\n\r\n      encState = \"encrypt\";\r\n      value = decryptedText;\r\n      setEditingNote({ ...editingNote, fmtext: decryptedText });\r\n    }\r\n    setIsoverlayActive(false);\r\n    setEncryptionState(encState);\r\n    save(\"encrypt\", value, encState);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setEditingNote({ ...editingNote, fmtext: e.target.value });\r\n    setIsSaveEnabled(true);\r\n  };\r\n\r\n  const close = () => {\r\n    setIsEditorActive(false);\r\n    setEditingNote({});\r\n    setIsSaveEnabled(false);\r\n  };\r\n\r\n  const deleteFn = () => {\r\n    setIsEditorActive(false);\r\n    setIsSaveEnabled(false);\r\n    deleteNote(editingNote.id);\r\n  };\r\n\r\n  return (\r\n    <div className={`EditorContainer ${isEditorActive ? \"active\" : \"\"}`}>\r\n      <div className={`Editor ${isEditorActive ? \"active\" : \"\"}`}>\r\n        {isoverlayActive ? (\r\n          <PasswordOverlay\r\n            encryptionState={encryptionState}\r\n            Encrypting={Encrypting}\r\n            setIsoverlayActive={setIsoverlayActive}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <header className=\"options\">\r\n          <button title=\"Close current note\" onClick={close} className=\"close\">\r\n            {\"\\u00D7\"}\r\n          </button>\r\n          <div className=\"rightButtons\">\r\n            <button\r\n              title={`Current note is in ${\r\n                encryptionState === \"decrypt\" ? \"encrypted\" : \"decrypted\"\r\n              } form. Click to ${encryptionState} it.`}\r\n              onClick={Encrypt}\r\n              className=\"encrypt\"\r\n            >\r\n              <i\r\n                class={`fa fa-${\r\n                  encryptionState === \"encrypt\" ? \"lock-open\" : \"lock\"\r\n                }`}\r\n                aria-hidden=\"true\"\r\n              ></i>\r\n            </button>\r\n            <button\r\n              title=\"Delete the current note\"\r\n              onClick={deleteFn}\r\n              className=\"deleteBtn\"\r\n            >\r\n              <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\r\n            </button>\r\n            <button\r\n              title=\"Save current note\"\r\n              onClick={isSaveEnabled ? save : null}\r\n              className={`save ${isSaveEnabled ? \"active\" : \"\"}`}\r\n            >\r\n              {\"\\u2713\"}\r\n            </button>\r\n          </div>\r\n        </header>\r\n        <div className=\"article\">\r\n          <ContentEditable\r\n            className=\"edit\"\r\n            html={editingNote.fmtext ? editingNote.fmtext : \"\"}\r\n            innerRef={ref}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import { useEffect, useState } from \"react\";\r\nimport \"./Search.scss\";\r\n\r\nconst Search = (props) => {\r\n  const { setIsSearching, notes, setSearchedNotes } = props;\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (notes.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (searchValue.length === 0) {\r\n      setIsSearching(false);\r\n      setSearchedNotes([]);\r\n      return;\r\n    }\r\n\r\n    if (searchValue.includes(\" \")) {\r\n      let sNotes = notes.filter((note) =>\r\n        note?.rawtext.toLowerCase().includes(searchValue.toLowerCase())\r\n      );\r\n      setIsSearching(true);\r\n      setSearchedNotes(sNotes);\r\n      return;\r\n    }\r\n\r\n    let searchednotes = [];\r\n    for (let note of notes) {\r\n      let text = note.rawtext;\r\n      let words = text.split(\" \");\r\n\r\n      const len = searchValue.length;\r\n      const pos = words.findIndex(\r\n        (word) =>\r\n          word.substr(0, len).toLowerCase() === searchValue.toLowerCase()\r\n      );\r\n      if (pos === -1) {\r\n        continue;\r\n      }\r\n\r\n      searchednotes.push(note);\r\n    }\r\n\r\n    setIsSearching(true);\r\n    setSearchedNotes(searchednotes);\r\n  }, [searchValue]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleChange = (e) => {\r\n    setSearchValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        className=\"searchInput\"\r\n        type=\"text\"\r\n        placeholder=\"Search notes\"\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import { useState, useEffect } from \"react\";\nimport \"./App.scss\";\n\nimport Notes from \"./Notes\";\nimport Editor from \"./Editor\";\nimport Search from \"./Search\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n  const [searchedNotes, setSearchedNotes] = useState([]);\n  const [isSearching, setIsSearching] = useState(false);\n\n  const [isEditorActive, setIsEditorActive] = useState(false);\n  const [editingNote, setEditingNote] = useState({});\n  const [idgenerate, setIdgenerate] = useState(0);\n  const deleteNote = (id) => {\n    const updatedNotes = [...notes];\n    const pos = updatedNotes.findIndex((ele) => ele.id === id);\n    updatedNotes.splice(pos, 1);\n    setNotes(updatedNotes);\n  };\n\n  useEffect(() => {\n    const notestring = localStorage.getItem(\"notes\");\n    if (notestring && notestring.length > 0) {\n      const noteobj = JSON.parse(notestring);\n      setNotes(noteobj);\n    }\n    let currId = localStorage.getItem(\"noteID\");\n    if (currId) {\n      setIdgenerate(Number(currId));\n    } else {\n      localStorage.setItem(\"noteID\", \"0\");\n    }\n  }, []);\n\n  useEffect(() => {\n    const arrString = JSON.stringify(notes);\n    localStorage.setItem(\"notes\", arrString);\n    console.log(\"notes: \", notes);\n  }, [notes]);\n\n  const openNewNote = () => {\n    setIsEditorActive(true);\n    const obj = {\n      id: idgenerate,\n      fmText: \"\",\n      isEncrypted: false,\n    };\n\n    setEditingNote(obj);\n    setIdgenerate(idgenerate + 1);\n    localStorage.setItem(\"noteID\", (idgenerate + 1).toString());\n  };\n\n  return (\n    <div className=\"App\">\n      <Search\n        setIsSearching={setIsSearching}\n        notes={notes}\n        setSearchedNotes={setSearchedNotes}\n      />\n      <Notes\n        setIsEditorActive={setIsEditorActive}\n        notes={isSearching ? searchedNotes : notes}\n        setEditingNote={setEditingNote}\n        deleteNote={deleteNote}\n      />\n      <button onClick={openNewNote} className=\"addNew\">\n        {\"\\u002B\"}\n      </button>\n      <Editor\n        editingNote={editingNote}\n        setEditingNote={setEditingNote}\n        isEditorActive={isEditorActive}\n        setIsEditorActive={setIsEditorActive}\n        notes={notes}\n        setNotes={setNotes}\n        deleteNote={deleteNote}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  /* </React.StrictMode> */\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}